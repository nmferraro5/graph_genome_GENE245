names(dimnames(sites))<- c("Number of Sites","Condition")
pander(sites)
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
pander(sites)
draw.pairwise.venn(22, 20, 11, category = c("Dog People", "Cat People"), lty = rep("blank",
2), fill = c("light blue", "pink"), alpha = rep(0.5, 2), cat.pos = c(0,
0), cat.dist = rep(0.025, 2))
# install.packages('VennDiagram')
library(VennDiagram)
install.packages('VennDiagram')
library(VennDiagram)
draw.pairwise.venn(22, 20, 11, category = c("Dog People", "Cat People"), lty = rep("blank",
+     2), fill = c("light blue", "pink"), alpha = rep(0.5, 2), cat.pos = c(0,
+     0), cat.dist = rep(0.025, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
pander(sites)
372223+157787
883571+157787
draw.pairwise.venn(530010, 1041358, 157787, category = c("Pre-Imputation", "Post-Imputation"), lty = rep("blank",
+     2), fill = c("light blue", "lightgreen"), alpha = rep(0.5, 2), cat.pos = c(0,
+     0), cat.dist = rep(0.025, 2))
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(pander)
library(VennDiagram)
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787, category = c("Pre-Imputation", "Post-Imputation"), lty = rep("blank",
+ +     2), fill = c("light blue", "lightgreen"), alpha = rep(0.5, 2)
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787, category = c("Pre-Imputation", "Post-Imputation"), lty = rep("blank",
+ +     2), fill = c("light blue", "lightgreen"), alpha = rep(0.5, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787,
category = c("Pre-Imputation", "Post-Imputation"),
lty = rep("blank", 2),
fill = c("light blue", "lightgreen"),
alpha = rep(0.5, 2),
cat.pos = c(0,0), cat.dist = rep(0.025, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787,
category = c("Pre-Imputation", "Post-Imputation"),
lty = rep("blank", 2),
fill = c("light blue", "lightgreen"),
alpha = rep(0.5, 2),
cat.pos = c(0,0), cat.dist = rep(0.025, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787,
category = c("Pre-Imputation", "Post-Imputation"),
lty = rep("blank", 2),
fill = c("light blue", "lightgreen"),
alpha = rep(0.5, 2),
cat.pos = c(0,0), cat.dist = rep(0.025, 2))
getwd()
setwd("~/Documents/stanford/classes/spring17/bmi245/project/Gen")
setwd("~/Documents/stanford/classes/spring17/bmi245/project/graph_genome_GENE245/")
install.packages("SNPRelate")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("SNPRelate")
library(SNPRelate)
vcf.fn<-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
snpgdsVCF2GDS(vcf.fn, "ccm.gds",  method="biallelic.only")
genofile <- openfn.gds("ccm.gds")
ccm_pca<-snpgdsPCA(genofile)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2] ,col=as.numeric(substr(ccm_pca$sample, 1,3) == 'CCM')+3, pch=2)
sample.id <- read.gdsn(index.gdsn(genofile, "sample.id"))
sample.id
library(SNPRelate)
vcf.fn<-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
snpgdsVCF2GDS(vcf.fn, "ccm.gds",  method="biallelic.only")
genofile <- openfn.gds("ccm.gds")
ccm_pca<-snpgdsPCA(genofile)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2] ,col=as.numeric(substr(ccm_pca$sample, 1,3) == 'CCM')+3, pch=2)
ccm_pca
head(ccm_pca)
summary(ccm_pca)
ccm_pca$eigenvect[,1]
ccm_pca$eigenvect
substr(ccm_pca$sample, 1,3)
summary(substr(ccm_pca$sample, 1,3))
substr(ccm_pca$sample, 1,2)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2] ,col=as.numeric(substr(ccm_pca$sample, 1,2) == 'HG')+3, pch=2)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2] ,col=as.numeric(substr(ccm_pca$sample, 1,2) )+3, pch=2)
substr(ccm_pca$sample, 1,2)=='HG'
as.numeric(substr(ccm_pca$sample, 1,2)=='HG' )
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2] ,col=as.numeric(substr(ccm_pca$sample, 1,2)=='HG' )+3, pch=2)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2], col=as.factor(substr(ccm_pca$sample, 1,2)), pch=2)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2], col=as.factor(substr(ccm_pca$sample, 1,3)), pch=2)
legend(7,4.3,unique(as.factor(substr(ccm_pca$sample, 1,3))),col=1:length(ccm_pca$sample),pch=1)
legend(7,4.3,unique(as.factor(substr(ccm_pca$sample, 1,3))),col=1:length(ccm_pca$sample),pch=1)
legend(7,4.3,unique(as.factor(substr(ccm_pca$sample, 1,3))),col=1:as.factor(substr(ccm_pca$sample, 1,3)),pch=1)
legend(7,4.3,unique(as.factor(substr(ccm_pca$sample, 1,3))),col=1:length(as.factor(substr(ccm_pca$sample, 1,3))),pch=1)
legend(unique(as.factor(substr(ccm_pca$sample, 1,3))),col=1:length(as.factor(substr(ccm_pca$sample, 1,3))),pch=1)
legend('topright',unique(as.factor(substr(ccm_pca$sample, 1,3))),col=1:length(as.factor(substr(ccm_pca$sample, 1,3))),pch=1)
legend('topright', legend = levels(as.factor(substr(ccm_pca$sample, 1,3))), col = 1:5, cex = 0.8, pch = 1)
legend('topright', legend = levels(as.factor(substr(ccm_pca$sample, 1,2))), col = 1:5, cex = 0.8, pch = 1)
legend('topright', legend = levels(as.factor(substr(ccm_pca$sample, 1,2))), col = 1:5, cex = 0.8, pch = 16)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2], col=as.factor(substr(ccm_pca$sample, 1,3)), pch=2)
legend('topright', legend = levels(as.factor(substr(ccm_pca$sample, 1,2))), col = 1:5, cex = 0.8, pch = 16)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2], col=as.factor(substr(ccm_pca$sample, 1,3)), pch=2)
legend('topright', legend = levels(as.factor(substr(ccm_pca$sample, 1,2))), col = 1:5, cex = 0.8, pch = 16)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2], col=as.factor(substr(ccm_pca$sample, 1,2)), pch=2)
legend('topright', legend = levels(as.factor(substr(ccm_pca$sample, 1,2))), col = 1:5, cex = 0.8, pch = 16)
summary(ccm_pca)
unique(ccm_pca$sample.id)
View(unique(ccm_pca$sample.id))
View(list(unique(substr(ccm_pca$sample.id,1,2))))
head(genofile)
help(snpgdsVCF2GDS)
read.gdsn(index.gdsn(genofile, "sample.id"))
read.gdsn(index.gdsn(genofile, "genotype"))
read.gdsn(index.gdsn(genofile, "snp.rs.id"))
snpgdsSummary("ccm.gds")
info <- read.table("data/1000genomes_samples_info.tsv", header = TRUE)
info <- read.table("data/1000genomes_samples_info.tsv", header = TRUE)
info <- read.table("data/1000genomes_samples_info.tsv", header = TRUE)
info <- read.table("data/1000genomes_samples_info.tsv", header = TRUE, na.strings=c("","NA"))
info <- read.table("data/1000genomes_samples_info.tsv", header = TRUE, na.strings=c(""," ", "NA"))
info <- read.table("data/1000genomes_samples_info_short.tsv", header = TRUE,)
info <- read.table("data/1000genomes_samples_info_short.tsv", header = TRUE)
info <- read.csv("data/1000genomes_samples_clean.tsv", header = TRUE)
info<-read.csv("data/1000genomes_samples_clean.csv")
View(info)
vcf.fn<-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
snpgdsVCF2GDS(vcf.fn, "abca12.all",  method="biallelic.only")
genofile <- openfn.gds("abca12.all")
abca12_pca<-snpgdsPCA(genofile)
colnames(info)[1]<-"sample.id"
head(info)
super_abca12_pca <- merge(abca12_pca,info,by="sample.id")
help(snpgdsPCA)
sample_pop<-info$Superpopulation.code[which(abca12_pca$sample.id == info$sample.id]
sample_pop<-info$Superpopulation.code[which(abca12_pca$sample.id == info$sample.id)]
sample_pop<-info$Superpopulation.code[abca12_pca$sample.id == info$sample.id,]
abca12_pca$sample.id
pops<-data.frame(sample = info$sample.id, pop = info$Population.code, superpop = info$Superpopulation.code)
head(pops)
key = pops
data <- data.frame(id=abca12_pca$sample.id)
master <- merge(key,data,by.x = "sample", by.y = "id")
View(master)
length(abca12_pca$sample.id)
length(master$sample)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$pop), pch=2)
legend('topright', legend = levels(as.factor(master$pop)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2, xlab = "PCA - 1", ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
master$color <-'transparent'
master$color[which(master$superpop == 'AFR'), 'black']
master$color[which(master$superpop == 'AFR'), ]<-'black'
master[which(master$superpop == 'AFR'), "color"]<-'black'
master[which(master$superpop == 'EUR'), "color"]<-'blue'
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$color), pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = levels(as.factor(master$color)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=master$color, pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = levels(as.factor(master$color)), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=master$color, pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = master$color, col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=master$color, pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = levels(master$color), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=master$color, pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = as.factor(master$color), col = 1:5, cex = 0.8, pch = 16)
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=master$color, pch=2, xlab = "PCA - 1", ylab = "PCA - 2", main = "1000 Genomes Project for ABCA12 gene variants")
legend('topright', legend = c("EUR","AFR"), col = c("blue","black"), cex = 0.8, pch = 16)
vcf.fn<-"data/CHR2/ALL.chr2.vcf.gz"
snpgdsVCF2GDS(vcf.fn, "abca12.all",  method="biallelic.only")
genofile <- snpgdsOpen("abca12.all")
abca12_pca<-snpgdsPCA(genofile)
# By super population
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
# By population
plot(abca12_pca$eigenvect[,1],abca12_pca$eigenvect[,2], col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), col = 1:5, cex = 0.8, pch = 16)
vcf <-"data/CHR2/ALL.chr2.vcf.gz"
system.file("extdata", vcf, package="SNPRelate")
vcf.fn <- system.file("extdata", "data/CHR2/ALL.chr2.vcf.gz", package="SNPRelate")
snpgdsVCF2GDS(vcf.fn, "vcf.all",  method="biallelic.only")
print abca12_pca
print(abca12_pca)
summary(snpgdsPCA)
summary(abca12_pca)
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(abca12_pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
head(abca12_pca$eigenval)
head(abca12_pca$eigenvect)
head(abca12_pca$eigenvect[,1])
head(abca12_pca$eigenvect[,2])
tab <- data.frame(sample.id = abca12_pca$sample.id,
EV1 = abca12_pca$eigenvect[,1],    # the first eigenvector
EV2 = abca12_pca$eigenvect[,2],    # the second eigenvector
stringsAsFactors = FALSE)
head(tab)
genofile <- snpgdsOpen("vcf.all")
vcf <-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
system.file("extdata", vcf, package="SNPRelate")
snpgdsVCF2GDS(vcf.fn, "vcf.all",  method="biallelic.only")
genofile <- snpgdsOpen("vcf.all")
vcf.fn <-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
snpgdsVCF2GDS(vcf.fn, "vcf.all",  method="biallelic.only")
genofile <- snpgdsOpen("vcf.all")
head(genofile)
pc.percent <- abca12_pca$varprop*100
head(round(pc.percent, 2))
pairs(abca12_pca$eigenvect[,1:4], col=master$color, labels=lbls)
lbls <- paste("PC", 1:4, "\n", format(pc.percent[1:4], digits=2), "%", sep="")
pairs(abca12_pca$eigenvect[,1:4], col=master$color, labels=lbls)
pairs(abca12_pca$eigenvect[,1:4], col=master$color, labels=lbls)
pairs(abca12_pca$eigenvect[,1:4], col=master$color, labels=lbls, main = "1000 genomes data (blue=EUR, black=AFR) for ABCA12")
datpop <- factor(master$pop)[match(abca12_pca$sample.id, sample.id)]
parcoord(abca12_pca$eigenvect[,1:16], col=datpop)
library(MASS)
parcoord(abca12_pca$eigenvect[,1:16], col=datpop)
datpop <- factor(master$color)[match(abca12_pca$sample.id, sample.id)]
parcoord(abca12_pca$eigenvect[,1:16], col=datpop)
datpop <- factor(master$pop)[match(abca12_pca$sample.id, sample.id)]
parcoord(abca12_pca$eigenvect[,1:16], col=datpop)
chr <- read.gdsn(index.gdsn(genofile, "snp.chromosome"))
CORR <- snpgdsPCACorr(pca, genofile, eig.which=1:4)
chr <- read.gdsn(index.gdsn(genofile, "snp.chromosome"))
CORR <- snpgdsPCACorr(abca12_pca, genofile, eig.which=1:4)
savepar <- par(mfrow=c(3,1), mai=c(0.3, 0.55, 0.1, 0.25))
for (i in 1:3)
{
plot(abs(CORR$snpcorr[i,]), ylim=c(0,1), xlab="", ylab=paste("PC", i),
col=chr, pch="+")
}
set.seed(100)
ibs.hc <- snpgdsHCluster(snpgdsIBS(genofile, num.thread=2))
# Determine groups of individuals automatically
rv <- snpgdsCutTree(ibs.hc)
plot(rv$dendrogram, leaflab="none", main="1000 Genomes ABCA12 Gene")
race <- as.factor(master$pop)
rv2 <- snpgdsCutTree(ibs.hc, samp.group=as.factor(master$pop))
plot(rv2$dendrogram, leaflab="none", main="HapMap Phase II")
legend("topright", legend=levels(master$pop), col=1:nlevels(master$pop), pch=19, ncol=4)
race <- as.factor(master$superpop)
rv2 <- snpgdsCutTree(ibs.hc, samp.group=as.factor(race))
plot(rv2$dendrogram, leaflab="none", main="1000 Genomes ABCA12 Gene")
legend("topright", legend=levels(race), col=1:nlevels(race), pch=19, ncol=4)
rv2 <- snpgdsCutTree(ibs.hc, samp.group=as.factor(master$color))
plot(rv2$dendrogram, leaflab="none", main="1000 Genomes ABCA12 Gene")
legend("topright", legend=c('AFR','EUR'), col=c("black","blue"), pch=19, ncol=4)
abca12_pca$eigenvect
abca12_pca$eigenvect[,1:4]
summary(abca12_pca)
### PCA on 1000 genomes data
setwd("~/Documents/stanford/classes/spring17/bmi245/project/graph_genome_GENE245/")
####### Make table of samples to populations for coloring 
# VCF file just has sample IDs, no distinction for which population
# they belong to.
# Downloaded sample info list from 10000 genomes (table: igsr_samples.tsv)
# http://www.internationalgenome.org/data-portal/sample
# Removed biosampleID and dataCollection columns because missing values, not needed
info<-read.csv("data/1000genomes_samples_clean.csv")
colnames(info)[1]<-"sample.id"
key <- data.frame(sample = info$sample.id, pop = info$Population.code, superpop = info$Superpopulation.code)
data <- data.frame(id=abca12_pca$sample.id)
master <- merge(key,data,by.x = "sample", by.y = "id")
master$color <-'transparent'
master[which(master$superpop == 'AFR'), "color"]<-'black'
master[which(master$superpop == 'EUR'), "color"]<-'blue'
### VCF to PCA using SNPRelate package
source("https://bioconductor.org/biocLite.R")
biocLite("SNPRelate")
### PCA on 1000 genomes data
setwd("~/Documents/stanford/classes/spring17/bmi245/project/graph_genome_GENE245/")
####### Make table of samples to populations for coloring 
# VCF file just has sample IDs, no distinction for which population
# they belong to.
# Downloaded sample info list from 10000 genomes (table: igsr_samples.tsv)
# http://www.internationalgenome.org/data-portal/sample
# Removed biosampleID and dataCollection columns because missing values, not needed
info<-read.csv("data/1000genomes_samples_clean.csv")
colnames(info)[1]<-"sample.id"
key <- data.frame(sample = info$sample.id, pop = info$Population.code, superpop = info$Superpopulation.code)
data <- data.frame(id=abca12_pca$sample.id)
master <- merge(key,data,by.x = "sample", by.y = "id")
master$color <-'transparent'
master[which(master$superpop == 'AFR'), "color"]<-'black'
master[which(master$superpop == 'EUR'), "color"]<-'blue'
### VCF to PCA using SNPRelate package
#source("https://bioconductor.org/biocLite.R")
#biocLite("SNPRelate")
library(SNPRelate)
# Downloaded vcf for all 1000 genomes populations, phase 3, gene
#vcf.fn <- tabix -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.chr2.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz 2:184598366-184939492 | \
#bgzip -c > ALL.chr2.184598366-184939492.ZNF804A.genotypes.vcf.gz
#vcf.fn <-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
vcf.fn <- "data/ZNF/ALL.chr2.184598366-184939492.ZNF804A.genotypes.vcf.gz"
snpgdsVCF2GDS(vcf.fn, "vcf.all",  method="biallelic.only")
genofile <- snpgdsOpen("vcf.all")
vcf_pca<-snpgdsPCA(genofile)
# By super population
plot(vcf_pca$eigenvect[,1],vcf_pca$eigenvect[,2], 
     col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), 
       xlab = "PCA - 1",
       ylab = "PCA - 2",
       col = 1:5, cex = 0.8, pch = 16)
# By population
plot(vcf_pca$eigenvect[,1],vcf_pca$eigenvect[,2], 
     col=as.factor(master$superpop), pch=2)
legend('topright', legend = levels(as.factor(master$superpop)), 
       xlab = "PCA - 1",
       ylab = "PCA - 2",
       col = 1:5, cex = 0.8, pch = 16)
# Only show EUR and AFR
plot(vcf_pca$eigenvect[,1],vcf_pca$eigenvect[,2], 
     xlab = "PCA - 1",
     ylab = "PCA - 2",
     col=master$color, pch=2)
legend('topright', legend = c("EUR","AFR"), col = c("blue","black"), 
       cex = 0.8, pch = 16)
# By population
plot(vcf_pca$eigenvect[,1],vcf_pca$eigenvect[,2], 
     col=as.factor(master$superpop), pch=2,
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(master$superpop)), 
      col = 1:5, cex = 0.8, pch = 16)
master[which(master$superpop == 'AFR'), "color"]<-'black'
#master[which(master$superpop == 'EUR'), "color"]<-'blue'
master[which(master$superpop == 'SAS'), "color"]<-'turquoise'
master[which(master$superpop == 'EAS'), "color"]<-'blue'
plot(vcf_pca$eigenvect[,1],vcf_pca$eigenvect[,2], 
     xlab = "PCA - 1",
     ylab = "PCA - 2",
     col=master$color, pch=2)
#legend('topright', legend = c("EUR","AFR"), col = c("blue","black"), 
       #cex = 0.8, pch = 16)
legend('topright', legend = c("AFR","SAS","EAS"), col = c("black","turquoise","blue"), 
      cex = 0.8, pch = 16))
legend('topright', legend = c("AFR","SAS","EAS"), col = c("black","turquoise","blue"), 
      cex = 0.8, pch = 16)
subset = rbind(which(master$superpop == 'EAS'),which(master$superpop == 'SAS'),
               which(master$superpop == 'AFR')
)
which(master$superpop == "EAS")
subset = c(which(master$superpop == 'EAS'),which(master$superpop == 'SAS'),
               which(master$superpop == 'AFR')
)
# Only show subset
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     main = "African and "
     xlab = "PCA - 1",
     ylab = "PCA - 2",
     col=master$color, pch=2)
#legend('topright', legend = c("EUR","AFR"), col = c("blue","black"), 
       #cex = 0.8, pch = 16)
legend('topright', legend = c("AFR","SAS","EAS"), col = c("black","turquoise","blue"), 
      cex = 0.8, pch = 16)
list.files()
list.files("data/ZNF/ALL.chr2.*:)
list.files("data/ZNF/ALL.chr2.*")
list.files("data/ZNF/")
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     main = "African and Asian 1000 Genomes Individuals\nVariants in ZNF804A on Chr2",
     xlab = "PCA - 1",
     ylab = "PCA - 2",
     col=master$color, pch=2)
#legend('topright', legend = c("EUR","AFR"), col = c("blue","black"), 
       #cex = 0.8, pch = 16)
legend('topright', legend = c("AFR","SAS","EAS"), col = c("black","turquoise
      cex = 0.8, pch = 16)
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     main = "African and Asian 1000 Genomes Individuals\nVariants in ZNF804A on Chr2",
     xlab = "PCA - 1",
     ylab = "PCA - 2",
     col=master$color, pch=2)
subset = c(which(master$superpop == 'EAS'),which(master$superpop == 'AFR'))
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     main = "African and Asian 1000 Genomes Individuals\nVariants in ZNF804A on Chr2",
     xlab = "PCA - 1",
     ylab = "PCA - 2",
     col=c("black","green"), pch=2)
#legend('topright', legend = c("EUR","AFR"), col = c("blue","black"), 
       #cex = 0.8, pch = 16)
legend('topright', legend = levels(as.factor(c("AFR","EAS"))), col = c("black","green"), 
      cex = 0.8, pch = 16)
vcf_pca
vcf_pca$
vcf_pca$sample.id
vcf_pca$sample.id == master$sample
subset = c(which(master$superpop == 'EAS'),which(master$superpop == 'AFR'))
subset
master[subset,]
cbind(master[subset,]
cbind(master[subset,],vcf_pca$sample.id[subset])
plot(vcf_pca$eigenvect[,1],vcf_pca$eigenvect[,2], 
     col=as.factor(master$superpop), pch=2,
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(master$superpop)), 
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(master$superpop[subset])), 
       col = 1:2, cex = 0.8, pch = 16)
legend('topright', legend = levels(as.factor(master$superpop[subset])), 
       col = 1:2, cex = 0.8, pch = 16)
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(master$superpop[subset])), 
       col = 1:2, cex = 0.8, pch = 16)
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","EAS"))), 
       col = 1:2, cex = 0.8, pch = 16)
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","EAS"))), 
       col = c("black","green"), cex = 0.8, pch = 16)
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "African and Asian 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","EAS"))), 
       col = c("black","green"), cex = 0.8, pch = 16)
subset = c(which(master$superpop == 'AMR'),which(master$superpop == 'EUR'))
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "American and European 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AMR","EUR"))), 
       col = c("red","blue"), cex = 0.8, pch = 16)
subset = c(which(master$superpop == 'EAS'),which(master$superpop == 'EUR'))
# By super population
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "American and European 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("EUR","EAS"))), 
       col = c("blue","green"), cex = 0.8, pch = 16)
subset = c(which(master$superpop == 'EAS'),which(master$superpop == 'EUR'))
# By super population
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "Asian and European 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("EUR","EAS"))), 
       col = c("blue","green"), cex = 0.8, pch = 16)
"green"
subset = c(which(master$superpop == 'AFR'),which(master$superpop == 'EUR'))
# By super population
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "Asian and European 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","EUR"))), 
       col = c("black","blue"), cex = 0.8, pch = 16)
subset = c(which(master$superpop == 'AFR'),which(master$superpop == 'EUR'))
# By super population
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "African and European 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","EUR"))), 
       col = c("black","blue"), cex = 0.8, pch = 16)
subset = c(which(master$superpop == 'AFR'),which(master$superpop == 'AMR'))
# By super population
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "African and European 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","AMR"))), 
       col = c("black","red"), cex = 0.8, pch = 16)
# 
subset = c(which(master$superpop == 'AFR'),which(master$superpop == 'AMR'))
# By super population
plot(vcf_pca$eigenvect[subset,1],vcf_pca$eigenvect[subset,2], 
     col=as.factor(master$superpop[subset]), pch=2,
     main = "African and American 1000 Genomes Individuals\nVariants in ZNF804A on Chr 2",
     xlab = "PCA - 1",
     ylab = "PCA - 2")
legend('topright', legend = levels(as.factor(c("AFR","AMR"))), 
       col = c("black","red"), cex = 0.8, pch = 16)
q()
