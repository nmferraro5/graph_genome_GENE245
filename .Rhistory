hh
source('~/test.R')
transition
hh
source('~/test.R')
source('~/HMM.R')
source('~/HMM.R')
source("HMM.R")
source("~/HMM.R")
source('~/HMM.R')
source('~/HMM.R')
source('~/HMM.R')
source('~/HMM.R')
source("~/HMM.R")
source("~/HMM.R")
source("~/HMM.R")
source("~/HMM.R")
source("~/HMM.R")
source("~/HMM.R")
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
data$observation
pos=posterior(hmm=hh, obs=dat$observation)
pos
dat$observation
vit=viterbi(hmm=hh, obs=dat$observation)
vit
pos=posterior(hmm=hh, obs=dat$observation)
pos
vit=viterbi(hmm=hh, obs=dat$observation)
vit
class(vit)
vit[1]
vit[,1]
source('~/HMM.R')
source('~/HMM.R')
# Changed marker number to 201
source("~/HMM.R")
# Changed marker number to 201
source("~/HMM.R")
source("~/HMM.R")
# Changed marker number to 201
source("~/HMM.R")
source('~/HMM.R')
source("~/HMM.R")
source("~/HMM.R")
runHMM(51)
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L)
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L){
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L){
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
runHMM(51)
# Changed marker number to 201
runHMM(201)
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L){
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
runHMM(51)
# Changed marker number to 201
runHMM(201)
dev.off()
library("ggmap")
library(maptools)
library(maps)
install.packages("ggmap")
install.packages("maptools")
install.packages("map")
install.packages("maps")
library(maptools)
library(maps)
library(ggmap)
library(maptools)
library(maps)
library(ggmap)
require(ggplot2)
sampled("Germany", "Siberia", "Spain", "Italy")
sampled <- c("Germany", "Siberia", "Spain", "Italy")
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sample.x <-ll.sampled$lon
sample.y <-ll.sampled$lat
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sample.x <-ll.sampled$lon
sample.y <-ll.sampled$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(sample.x,sample.y, col="red", pch=16)
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
install.packages("ggproto")
biocLite("ggproto")
library(maptools)
library(maps)
library(ggmap)
require(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sample.x <-ll.sampled$lon
sample.y <-ll.sampled$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(sample.x,sample.y, col="red", pch=16)
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
mapPoints <- ggmap(map) +
+   geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
#devtools::install_github("dkahle/ggmap")
#devtools::install_github("hadley/ggplot2")
library(devtools)
install_github("hadley/ggplot2@v2.2.0")
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
mapPoints <- ggmap(map) +
+   geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
getwd()
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE,row.names = TRUE)
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE,rownames = TRUE)
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
View(discordance.matrix)
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
f<-ftable(discordance.matrix)
View(f)
t<-table(discordance.matrix)
View(t)
test = discordance.matrix
names(dimnames(test))<-c("original","imputed")
View(test)
test
table(Pre-imputation = test[[2]], Post-imputation = test[[3]])
table(PreImputation = test[[2]], PostImputation = test[[3]])
dimnames(test)
test[[1]]<-"PostImputation"
View(discordance.matrix)
dimnames(test)
dimnames(discordance.matrix)
names(dimnames(test))
names(dimnames(discordance.matrix))
names(dimnames(discordance.matrix))<-c("PreImputation","PostImputation")
names(dimnames(discordance.matrix))
names(dimnames(table(discordance.matrix)))
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
pander(discordance.matrix)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=FALSE, warning=FALSE, message=FALSE)
library(pander)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(pander)
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
pander(discordance.matrix)
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
pander(discordance.matrix,style = "rmarkdown",)
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
discordance.matrix[,4]<-NULL
discordance.matrix[4,]<-NULL
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
discordance.matrix[,4]<-NULL
pander(discordance.matrix,style = "rmarkdown",)
discordance.matrix[4,]<-NULL
discordance.matrix[4,]
discordance.matrix[-4,]
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
discordance.matrix[,4]<-NULL
discordance.matrix <- discordance.matrix[-4,]
pander(discordance.matrix,style = "rmarkdown",)
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
discordance.matrix[,4]<-NULL
discordance.matrix <- discordance.matrix[-4,]
pander(discordance.matrix,style = "html")
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
discordance.matrix[,4]<-NULL
discordance.matrix <- discordance.matrix[-4,]
pander(discordance.matrix,style = "rmarkdown")
sites <- data.frame(Common=157787,PostImputation=883571,PreImputation=3722253)
sites <- data.frame(Common=157787,PostImputation=883571,PreImputation=3722253)
pander(sites)
# Read file generated by VCFTOOLS
setwd("~/Documents/lab/pritchardLab/compImp/")
discordance.matrix <- read.table("chr1.diff.discordance_matrix",header=TRUE)
# Adjust row names
rownames(discordance.matrix) <- discordance.matrix[,1]
discordance.matrix[,1] <- NULL
colnames(discordance.matrix)<-c("IMP.N_00","IMP.N_01","IMP.N_11","IMP.N_UU")
rownames(discordance.matrix)<-c("N_00","N_01","N_11","N_UU")
discordance.matrix[,4]<-NULL
discordance.matrix <- discordance.matrix[-4,]
pander(discordance.matrix,style = "rmarkdown")
sites <- data.frame(Common=157787,PostImputation=883571,PreImputation=3722253)
names(dimnames(sites))<- c("Number of Sites","Condition")
pander(sites)
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
pander(sites)
draw.pairwise.venn(22, 20, 11, category = c("Dog People", "Cat People"), lty = rep("blank",
2), fill = c("light blue", "pink"), alpha = rep(0.5, 2), cat.pos = c(0,
0), cat.dist = rep(0.025, 2))
# install.packages('VennDiagram')
library(VennDiagram)
install.packages('VennDiagram')
library(VennDiagram)
draw.pairwise.venn(22, 20, 11, category = c("Dog People", "Cat People"), lty = rep("blank",
+     2), fill = c("light blue", "pink"), alpha = rep(0.5, 2), cat.pos = c(0,
+     0), cat.dist = rep(0.025, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
pander(sites)
372223+157787
883571+157787
draw.pairwise.venn(530010, 1041358, 157787, category = c("Pre-Imputation", "Post-Imputation"), lty = rep("blank",
+     2), fill = c("light blue", "lightgreen"), alpha = rep(0.5, 2), cat.pos = c(0,
+     0), cat.dist = rep(0.025, 2))
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(pander)
library(VennDiagram)
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787, category = c("Pre-Imputation", "Post-Imputation"), lty = rep("blank",
+ +     2), fill = c("light blue", "lightgreen"), alpha = rep(0.5, 2)
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787, category = c("Pre-Imputation", "Post-Imputation"), lty = rep("blank",
+ +     2), fill = c("light blue", "lightgreen"), alpha = rep(0.5, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787,
category = c("Pre-Imputation", "Post-Imputation"),
lty = rep("blank", 2),
fill = c("light blue", "lightgreen"),
alpha = rep(0.5, 2),
cat.pos = c(0,0), cat.dist = rep(0.025, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787,
category = c("Pre-Imputation", "Post-Imputation"),
lty = rep("blank", 2),
fill = c("light blue", "lightgreen"),
alpha = rep(0.5, 2),
cat.pos = c(0,0), cat.dist = rep(0.025, 2))
sites <- data.frame(Common=157787,PostImputationOnly=883571,PreImputationOnly=372223)
#pander(sites)
draw.pairwise.venn(530010, 1041358, 157787,
category = c("Pre-Imputation", "Post-Imputation"),
lty = rep("blank", 2),
fill = c("light blue", "lightgreen"),
alpha = rep(0.5, 2),
cat.pos = c(0,0), cat.dist = rep(0.025, 2))
getwd()
setwd("~/Documents/stanford/classes/spring17/bmi245/project/Gen")
setwd("~/Documents/stanford/classes/spring17/bmi245/project/graph_genome_GENE245/")
install.packages("SNPRelate")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("SNPRelate")
library(SNPRelate)
vcf.fn<-"data/ABCA12/ALL.chr2.214931542-215138591.phase3.genotypes.vcf"
snpgdsVCF2GDS(vcf.fn, "ccm.gds",  method="biallelic.only")
genofile <- openfn.gds("ccm.gds")
ccm_pca<-snpgdsPCA(genofile)
plot(ccm_pca$eigenvect[,1],ccm_pca$eigenvect[,2] ,col=as.numeric(substr(ccm_pca$sample, 1,3) == 'CCM')+3, pch=2)
sample.id <- read.gdsn(index.gdsn(genofile, "sample.id"))
sample.id
