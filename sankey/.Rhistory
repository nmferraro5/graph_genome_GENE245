vit[1]
vit[,1]
source('~/HMM.R')
source('~/HMM.R')
# Changed marker number to 201
source("~/HMM.R")
# Changed marker number to 201
source("~/HMM.R")
source("~/HMM.R")
# Changed marker number to 201
source("~/HMM.R")
source('~/HMM.R')
source("~/HMM.R")
source("~/HMM.R")
runHMM(51)
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L)
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L){
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L){
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
runHMM(51)
# Changed marker number to 201
runHMM(201)
### Sample code for Problem 3, HW1
### Infer haplotype IBD based on observed IBS status
## use package installer to install package, HMM
library(HMM)
runHMM <- function(L){
### Hidden markove model simulation:
M=200; ## total length of the region, in recombination distance (cM)
#L=51; ## #of markers
rr=(M/(L-1)*0.02); ## recombination probability between consecutive markers
pp=.4; 	qq=1-pp;
## define the transition matrix based on your answer to part (a) of the question
## replace aa, bb, cc, dd
transition=matrix(c(1-0.08, 0.08,  0.08,1-0.08), nrow=2, byrow=T)
## define the emission probabilities based on your answer to part (b) of the question
## replace uu, vv, ww, xx
emission=matrix(c(0.24,0.76, 0,1), nrow=2, byrow=T)
## initial probability: at each position, P(IBD)=0.5 for the two haplotypes
pi0=c(.5, .5)
### this initialize an HMM object
hh=initHMM(States=c("0", "1"), Symbols=c("D", "S"), startProbs=pi0, transProbs=transition, emissionProbs=emission)
### Generate a simulated data: dat has two elements: states=hidden states and observation
dat=simHMM(hmm=hh, length=L)
pos=posterior(hmm=hh, obs=dat$observation)
vit=viterbi(hmm=hh, obs=dat$observation)
### For visualizing true and inferred IBD
par(mfrow=c(2,1))
plot(dat$observation=="S", col=6, pch=17, main="Observed IBS")
plot(dat$states=="1", col="grey", pch=20, cex=.7, ylim=c(-.3, 1.3), main="True & Estimated IBD")
points(pos["1",], col=4, pch=3)
points(vit, col="red", pch=5, cex=.7)
}
runHMM(51)
# Changed marker number to 201
runHMM(201)
dev.off()
library("ggmap")
library(maptools)
library(maps)
install.packages("ggmap")
install.packages("maptools")
install.packages("map")
install.packages("maps")
library(maptools)
library(maps)
library(ggmap)
library(maptools)
library(maps)
library(ggmap)
require(ggplot2)
sampled("Germany", "Siberia", "Spain", "Italy")
sampled <- c("Germany", "Siberia", "Spain", "Italy")
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sample.x <-ll.sampled$lon
sample.y <-ll.sampled$lat
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sample.x <-ll.sampled$lon
sample.y <-ll.sampled$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(sample.x,sample.y, col="red", pch=16)
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
install.packages("ggproto")
biocLite("ggproto")
library(maptools)
library(maps)
library(ggmap)
require(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
routes <- read.csv("http://openflights.svn.sourceforge.net/viewvc/openflights/openflights/data/routes.dat", header=F)
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
sampled <- c("Germany", "Siberia", "Spain", "Italy")
ll.sampled <- geocode(sampled)
sample.x <-ll.sampled$lon
sample.y <-ll.sampled$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(sample.x,sample.y, col="red", pch=16)
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
ggmap(map)
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
mapPoints <- ggmap(map) +
+   geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
library(maptools)
library(maps)
library(ggmap)
library(ggplot2)
#devtools::install_github("dkahle/ggmap")
#devtools::install_github("hadley/ggplot2")
library(devtools)
install_github("hadley/ggplot2@v2.2.0")
routes <- read.csv("https://github.com/jpatokal/openflights/raw/master/data/routes.dat", header=F)
colnames(routes) <- c("airline", "airlineID", "sourceAirport", "sourceAirportID", "destinationAirport", "destinationAirportID", "codeshare", "stops", "equipment")
library(plyr)
departures <- ddply(routes, .(sourceAirportID), "nrow")
names(departures)[2] <- "flights"
arrivals <- ddply(routes, .(destinationAirportID), "nrow")
names(arrivals)[2] <- "flights"
map <- get_map(location = 'Europe', zoom = 2)
mapPoints <- ggmap(map) +
+   geom_point(aes(x = lon, y = lat, size = sqrt(flights)), data = airportD, alpha = .5)
library(googleVis)
install.packages("googleVis")
library(googleVis)
options(gvis.plot.tag='chart')
popA <- data.frame(source = c("c1","rs1","c2")
target = c("rs1","c2","rs2")
freq = c(.5,.3,1))
popA <- data.frame(source = c("c1","rs1","c2"),
target = c("rs1","c2","rs2"),
freq = c(.5,.3,1))
s=gvisSankey(popA[,c('source','target'.)])
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
write(s,file="testSankey.html")
popA <- data.frame(source = c("c1","c1","rs1","rs1","c2"),
target = c("rs1","c2","c2","c2","rs2"),
freq = c(.5,.5,.3,.7,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("c1","c1","rs1","rs1ref","rs1alt"),
target = c("rs1ref","rs1alt","c2","c2","rs2"),
freq = c(.5,.5,.3,.7,1))
popA <- data.frame(source = c("c1","c1","rs1ref","rs1alt"),
target = c("rs1ref","rs1alt","c2","c2"),
freq = c(.3,.7,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("consensus1","consensus1","rs1-ref","rs1-alt","consensus2","consensus2","rs2-ref","rs2-alt"),
target = c("rs1-ref","rs1alt","consensus2","consensus2","rs2-ref","rs2-alt","consensus3","consensus3"),
freq = c(.3,.7,1,1,0.5,0.5,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("consensus1","consensus1","rs1-ref","rs1-alt","consensus2","consensus2","rs2-ref","rs2-alt"),
target = c("rs1-ref","rs1-alt","consensus2","consensus2","rs2-ref","rs2-alt","consensus3","consensus3"),
freq = c(.3,.7,1,1,0.5,0.5,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("ACCTGAAAATCAGCGCTAAT","ACCTGAAAATCAGCGCTAAT","T","A"),
target = c("A","G","TGCAATCGCCA","TGCAATCGCCA"),
freq = c(.3,.7,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","A","G","CTGACCGTTAAAAATC","CTGACCGTTAAAAATC","T","A"),
target = c("A","G","CTGACCGTTAAAAATC","CTGACCGTTAAAAATC","T","A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAAAAATC","CTGACCGTTAAAAATC","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAAAAATC","CTGACCGTTAAAAATC","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1))
s=gvisSankey(popA[,c('source','target','freq')])
plot(s)
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1)
options = c(list(width=1000, height=300),list(width=500, height=300),list(width=200, height=300),list(width=800, height=300),list(width=100, height=300),list(width=200, height=300),list(width=400, height=300),list(width=300, height=300)))
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1),
options = c(list(width=1000, height=300),list(width=500, height=300),list(width=200, height=300),list(width=800, height=300),list(width=100, height=300),list(width=200, height=300),list(width=400, height=300),list(width=300, height=300)))
s=gvisSankey(popA[,c('source','target','freq','options')])
View(popA)
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1),options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { width: 4,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 14,
color: '#871b47',
bold: true,
italic: true } }}")))
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1),options=list(
sankey="{link: {color: { fill: '#d799ae' } },
node: { width: 4,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 14,
color: '#871b47',
bold: true,
italic: true } }}"))
s=gvisSankey(popA[,c('source','target','freq','options')])
plot(gvisSankey(popA[,c('source','target','freq','options')]))
plot(gvisSankey(popA[,c('source','target','freq','sankey')]))
popA <- data.frame(source = c("ACTGAAACCTGCC","ACTGAAACCTGCC","rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A"),
target = c("rs1-A","rs1-G","CTGACCGTTAA","CTGACCGTTAA","rs2-T","rs2-A","GGGGTCCCACTC","GGGGTCCCACTC"),
freq = c(.3,.7,1,1,0.5,0.5,1,1),
sankey="{link: {color: { fill: '#d799ae' } },
node: { width: 4,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 14,
color: '#871b47',
bold: true,
italic: true } }}")
plot(gvisSankey(popA[,c('source','target','freq','sankey')]))
View(popA)
getwd()
setwd("~/Documents/stanford/classes/spring17/bmi245/project/graph_genome_GENE245/sankey/")
eur<-read.table("../data/ABCA12/ALL.chr2.214931542-215138591.short.EUR.vcf")
View(eur)
colnames(eur)<-("chr","pos","id","ref","alt","af")
colnames(eur)<-("chr","pos","id","ref","alt","maf")
colnames(eur) <- c("chr","pos","id","ref","alt","maf")
eur[ c(TRUE,FALSE), ]  # rows
eur$source <- "source"
ls
head(eur)
eur$target<-"target"
head(eur)
eur[c(TRUE,FALSE), "source"] <- paste0(eur[c(TRUE,FALSE), "id"],eur[c(TRUE,FALSE), "ref"]
eur[c(TRUE,FALSE), "source"] <- paste0(eur[c(TRUE,FALSE), "id"],eur[c(TRUE,FALSE), "ref"])
head(eur)
eur[c(TRUE,FALSE), "source"] <- paste0(eur[c(TRUE,FALSE), "id"],"-",eur[c(TRUE,FALSE), "ref"])
eur[!c(TRUE,FALSE), "source"] <- paste0(eur[!c(TRUE,FALSE), "id"],"-",eur[!c(TRUE,FALSE), "alt"])
head(eur)
eur$id<-eur$source
head(eur)
eur[!c(TRUE,FALSE), "maf"] <- 1-eur[c(TRUE,FALSE), "maf"]
head(eur)
eur<-read.table("../data/ABCA12/ALL.chr2.214931542-215138591.short.EUR.vcf")
colnames(eur) <- c("chr","pos","id","ref","alt","maf")
eur$source<-"source"
eur$target<-"target"
# Change odd rows to ref
eur[c(TRUE,FALSE), "source"] <- paste0(eur[c(TRUE,FALSE), "id"],"-",eur[c(TRUE,FALSE), "ref"])
# Change even rows to alt
eur[!c(TRUE,FALSE), "source"] <- paste0(eur[!c(TRUE,FALSE), "id"],"-",eur[!c(TRUE,FALSE), "alt"])
# Should've doen id
eur$id<-eur$source
eur[c(TRUE,FALSE), "maf"] <- 1-eur[!c(TRUE,FALSE), "maf"]
head(eur)
simple<-eur[c("source","target","maf"),]
head(simple)
simple<-eur[,c("source","target","maf")]
head(simple)
test<-rep("n",6)
test
test<-rep(2:4,2)
test
test<-rep_len(2:4,2)
test
test<-rep_len(2:4,6)
test
rep.int(3,6)
test<-rep(c(2, 3, 4), each = 2)
test
test<-paste0("cs-",rep(c(2, 3, 4), each = 2))
test
paste0("cs-",rep(c(2:nrow(simple)), each = 2))
paste0("cs-",rep(c(2:nrow(simple)/2), each = 2))
nrow(simple)
head(simple)
(nrow(simple)-2)/2)
nrow(simple)-2)/2
nrow(simple)-2/2
(nrow(simple)-2)/2
nrow(simple)-2
18/2
paste0("cs-",rep(c((nrow(simple)-2)/2), each = 2))
paste0("cs-",rep(c(2:(nrow(simple)-2)/2), each = 2))
paste0("cs-",rep(c(2:9, each = 2))
paste0("cs-",rep(c(2:9, each = 2)))
1:9
2:9
rep(2:9,each=2)
rep(c(2:9, each = 2))
paste0("cs-",rep(2:9, each = 2)
paste0("cs-",rep(2:9, each = 2))
length(paste0("cs-",rep(2:9, each = 2)))
length(paste0("cs-",rep(2:10, each = 2)))
nrow(simple)
length(paste0("cs-",rep(1:nrow(simple), each = 2)))
paste0("cs-",rep(1:nrow(simple), each = 2))
nrow(simple)
simple$target<-paste0("cs-",rep(1:nrow(simple), each = 2))
simple$target<-paste0("cs-",rep(1:nrow(simple)/2, each = 2))
simple$target<-paste0("cs-",rep(1:(nrow(simple)/2), each = 2))
head(simple)
simple$target<-rep(1:(nrow(simple)/2), each = 2)
head(simple)
cns = simple
cns
cns$maf<-1
head(cns)
head(simple)
simple$temp <-simple$source
simp$source <-simple$target
simple$source <-simple$target
simple$target <-simple$temp
simple$temp<-NULL
head(simple)
simple$source<-simple$source - 1
head(simple)
simple
simple$source<-paste0("cns-",simple$source)
head(simple)
cns$target <- paste0("cns-",cns$target)
head(cns)
pop.eur <- rbind(cns,simple)
plot(gvisSankey(pop.eur[,c('source','target','maf')]))
View(popA)
View(pop.eur)
View(cns)
cns$maf[3:]
cns$maf[3:,]
cns$maf[3:20]
cns$maf[3:20]<-simple$maf[1:18]
View(simple)
head(simple)
head(cns)
rsToCns = cns
cnsTors = simple
head rsToCns
head(rsToCns)
head(cnsTors)
rsToCns$maf<-cnsTors$maf
new<-rbind(rsToCns,cnsTors)
s=gvisSankey(new[,c('source','target','freq')])
s=gvisSankey(new[,c('source','target','maf')])
plot(s)
View(pop.eur)
View(new)
new[25,"maf"]<-0.3
new[26,"maf"]<-0.7
new[5,"maf"]<-0.3
new[6,"maf"]<-0.7
new[11,"maf"]<-0.2
new[12,"maf"]<-0.8
new[21,"maf"]<-0.2
new[22,"maf"]<-0.8
new[31,"maf"]<-0.2
new[32,"maf"]<-0.8
new[21,"maf"]<-0.9871
new[22,"maf"]<-0.0129
new[19,"maf"]<-0.1
new[20,"maf"]<-0.9
new[39,"maf"]<-0.1
new[40,"maf"]<-0.9
s=gvisSankey(new[,c('source','target','maf')])
plot(s)
write.table(new,file="real-short/real.short.fudged.txt",row.names = FALSE)
write.table(new,file="real-short/real.short.fudged.txt",row.names = FALSE,quote = FALSE)
